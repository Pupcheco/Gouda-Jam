
//#pragma once

struct Outline
{

  float3 Side(float3 inColor, float2 invSize, float2 uvCoord, int worldnormal, float2 side)
  {
    float2 uv;

    uv.r = invSize.r * side.r;
    uv.g = invSize.g * side.g;
    float3 diffColor;

    if(!worldnormal)
    {
      //The UVs must be filtered through this function to be correct;
      uv.r += ViewportUVToSceneTextureUV(uvCoord,PPI_SceneDepth).r;
      uv.g += ViewportUVToSceneTextureUV(uvCoord,PPI_SceneDepth).g;

      //SceneTextureLookup is unreal engine code that is called 
      //when using the texture lookup code
      //https://www.raywenderlich.com/57-unreal-engine-4-custom-shaders-tutorial#toc-anchor-007
      diffColor = (float3)SceneTextureLookup(uv, PPI_SceneDepth, false);
    }
    else
    {
      //Same as above but for world normal
      uv.r += ViewportUVToSceneTextureUV(uvCoord,PPI_WorldNormal).r;
      uv.g += ViewportUVToSceneTextureUV(uvCoord,PPI_WorldNormal).g;
      diffColor = (float3)SceneTextureLookup(uv, PPI_WorldNormal, false);
    }

    inColor -=  diffColor;
  
    return inColor;
  }

  float3 Outline()
  {
    
    //WorldNormal is just being used as a bool
    float3 left   = Side(INColor, InvSize, UVCoord, (int)  WorldNormal, float2(-1 * (int)Thickness, 0));
    float3 right  = Side(INColor, InvSize, UVCoord, (int)  WorldNormal, float2( 1 * (int)Thickness, 0));
    float3 top    = Side(INColor, InvSize, UVCoord, (int)  WorldNormal, float2( 0, 1 * (int)Thickness));
    float3 bottom = Side(INColor, InvSize, UVCoord, (int)  WorldNormal, float2( 0,-1 * (int)Thickness));
    

    float3 created = right + left + top + bottom;

    return created;
    
  }

};

Outline finOutline;

return finOutline.Outline();
